name: Build, Test, and Release

on: [push, pull_request]

jobs:
  test_windows:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Running pytest
      run: |
        pytest

  test_ubuntu:
    needs: test_windows
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install ffmpeg
      run: |
        sudo apt install software-properties-common
        sudo apt update
        sudo add-apt-repository ppa:jonathonf/ffmpeg-4
        sudo apt install ffmpeg

    - name: Install Xvfb
      run: sudo apt-get install xvfb

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Running pytest with Xvfb
      run: |
        xvfb-run pytest -v --cov --cov-report=xml --cov-report=html --junitxml="xunit-result.xml"

    - uses: actions/upload-artifact@v3
      with:
        name: code-coverage
        path: htmlcov

    - name: SonarCloud Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build_and_release_installer:
    needs: test_ubuntu 
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/v') # Only run on version tags
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
      shell: bash

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Get version components
      run: |
        VERSION_MAJOR=$(echo "${{ env.VERSION }}" | cut -d. -f1)
        VERSION_MINOR=$(echo "${{ env.VERSION }}" | cut -d. -f2)
        VERSION_PATCH=$(echo "${{ env.VERSION }}" | cut -d. -f3)
        echo "VERSION_MAJOR=$VERSION_MAJOR" >> $GITHUB_ENV
        echo "VERSION_MINOR=$VERSION_MINOR" >> $GITHUB_ENV
        echo "VERSION_PATCH=$VERSION_PATCH" >> $GITHUB_ENV
      shell: bash

    - name: Create version file
      run: |
        echo "VSVersionInfo(
          ffi=FixedFileInfo(
            filevers=($VERSION_MAJOR, $VERSION_MINOR, $VERSION_PATCH, 0),
            prodvers=($VERSION_MAJOR, $VERSION_MINOR, $VERSION_PATCH, 0),
            mask=0x3f,
            flags=0x0,
            OS=0x40004,
            fileType=0x1,
            subtype=0x0,
            date=(0, 0)
          ),
          kids=[
            StringFileInfo([StringTable(
              u'040904B0',
              [StringStruct(u'FileVersion', u'$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH'),
                StringStruct(u'ProductVersion', u'$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH'),
                StringStruct(u'ProductName', u'GEP Media Compressor'),
                StringStruct(u'FileDescription', u'GEP Media Compressor')])]),
            VarFileInfo([VarStruct(u'Translation', [1033, 1200])])
          ]
        )" > version.txt

    - name: Build executable
      run: |
        pyinstaller --onefile --icon=./assets/ges.ico --name "GEP Media Compressor" --noconsole --windowed --version-file=version.txt main.py
      env:
        VERSION: ${{ env.VERSION }}

    - name: Compile .ISS to .EXE Installer
      uses: Minionguyjpro/Inno-Setup-Action@v1.2.2
      with:
        path: utils/setup/setup.iss

    - name: Upload Installer to Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/GEP Media Compressor Installer.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
