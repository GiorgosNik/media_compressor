name: Build, Test, and Release

on: [push, pull_request]

jobs:
  test_windows:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Running pytest
      run: |
        pytest

  test_ubuntu:
    needs: test_windows
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install ffmpeg
      run: |
        sudo apt install software-properties-common
        sudo apt update
        sudo add-apt-repository ppa:jonathonf/ffmpeg-4
        sudo apt install ffmpeg

    - name: Install Xvfb
      run: sudo apt-get install xvfb

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Running pytest with Xvfb
      run: |
        xvfb-run pytest -v --cov --cov-report=xml --cov-report=html --junitxml="xunit-result.xml"

    - uses: actions/upload-artifact@v3
      with:
        name: code-coverage
        path: htmlcov

    - name: SonarCloud Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build_and_release_installer:
      needs: test_ubuntu
      runs-on: windows-latest
      if: startsWith(github.ref, 'refs/tags/v') # Only run on version tags
      permissions:
        contents: write

      steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Extract version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Generate version file
        run: |
          echo "# UTF-8" > version.txt
          echo "VSVersionInfo(" >> version.txt
          echo "  ffi=FixedFileInfo(" >> version.txt
          echo "    filevers=(${version//./,}, 0)," >> version.txt
          echo "    prodvers=(${version//./,}, 0)," >> version.txt
          echo "    mask=0x3f," >> version.txt
          echo "    flags=0x0," >> version.txt
          echo "    OS=0x4," >> version.txt
          echo "    fileType=0x1," >> version.txt
          echo "    subtype=0x0," >> version.txt
          echo "    date=(0, 0)" >> version.txt
          echo "  )," >> version.txt
          echo "  kids=[StringFileInfo([" >> version.txt
          echo "    [\"FileDescription\", \"GEP Media Compressor\"]," >> version.txt
          echo "    [\"FileVersion\", \"${version}\"]," >> version.txt
          echo "    [\"ProductName\", \"GEP Media Compressor\"]," >> version.txt
          echo "    [\"ProductVersion\", \"${version}\"]," >> version.txt
          echo "  ]), VarFileInfo([(\"Translation\", [1033, 1200])])]" >> version.txt
          echo ")" >> version.txt

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build executable
        run: |
          pyinstaller --onefile --icon=./assets/ges.ico --version-file=version.txt --noconsole --windowed main.py

      - name: Compile .ISS to .EXE Installer
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.2
        with:
          path: utils/setup/setup.iss

      - name: Upload Installer to Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/GEP Media Compressor Installer.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}